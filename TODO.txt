Internationalize
(https://blog.shahednasser.com/how-to-internationalize-a-react-app/)

Refresh/reset/expire token

-Como front, si ya existe user y token, check token, si todo está bien continuar.
-Como front, si ya existe user y token, check token, si no es correcto hacer logout,
y borrar user y token e ir a Login.
-Como front, si no existe usuario o token, borrar usuario o token e ir al Login.
-Como front, intentar hacer login, si ya existe token y pueden haber multiples login,
no hay problema (Que el backend cree un nuevo token cada vez pero con expiración)
-Como front, intentar hacer login, si solo puede haber un token (login) por usuario y
el token ya existe (si estoy intentando hacer login yo no tengo user o token), entonces
hacer un logout con la cédula y el password (porque no tengo token)
- Si existe el token o el user, pero el token no existe en la BD, borrar token y user de localStorage

Reportes: API con un array con la información.

Mover las comprobaciones y errores al componente Input
    Dependiendo del type hacer la validacion correspondiente.
    Debe tener una función que devuelva al padre el error.

Roles en ingles "secretary, "teacher", "student"

Preguntarle a la inge:
- Si solo cedula o tal vez tambien pasaporte
- Si NOMBRES o nombre_1 y nombre_2, igual para apellidos
- Si lo que estamos trayendo de el login esta buien o le falta

Cambiar de cédula a identificacion en olvide la contraseña
Identificacion validación min 10 max 20

Coso de DATE del año de nacimiento

Botón de guardar en Perfil, Raul me manda una respuesta y dependiendo de eso, mostrar un modal.
(o mensaje pequeño abajo de correcto)

-- Menos importante, pero importante --
Cambiar validaciones a que esten dentro del Input



BACKEND debe expirar de LEY el token 24h
BACKEND un API que reciba la identificacion y el token y devuelva un mensaje diciendo verdadero si corresponden o falso y no corresponden (si no existe el token)
FRONTEND debe chequear mandar ese pedido de API cada inicio de aplicacion



    filtro["8vo","all","all"];
    calificaciones(token, filtro)

    llamada SQL con filtros filtro[0], filtro[1], filtro[2]

Hacer scroll dentro del MainContainer


validacion correo:

  useEffect(() => {
    if (!correo.match(/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,})+$/))
      setCorreoError("Debe ingresar un correo válido");
    else if (correo.trim() === "") setCorreoError("Debe ingresar un correo");
    else setCorreoError("");
  }, [correo]);

validacion identificacion

  useEffect(() => {
    // if (!identificacion.match(/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,})+$/))
    if (identificacion.trim() === "")
      setidentificacionError("Debe ingresar una identificación");
    else if (identificacion.trim().length < 10)
      setidentificacionError(
        "La identificación debe tener al menos 10 caracteres"
      );
    else if (identificacion.trim().length > 20)
      setidentificacionError(
        "La identificación debe tener menos de 20 caracteres"
      );
    else if (!identificacion.match(/^\w+$/))
      setidentificacionError("Debe ingresar una identificación válida");
    else setidentificacionError("");
  }, [identificacion]);

validacion cedula:

  useEffect(() => {
    if (cedula.trim().length !== 10)
      setCedulaError("La cédula debe tener 10 dígitos");
    else if (!/^[0-9]+$/.test(cedula))
      setCedulaError("La cédula solo puede contener números");
    else if (cedula.trim() === "") setCedulaError("Debe ingresar una cédula");
    else setCedulaError("");
  }, [cedula]);